/**
 * 课程 4.10: 高级 CUDA 项目结构 - CPU 归约算法实现
 * 文件名: reduce_cpu.cpp
 * 作者: 权 双
 * 日期: 2023-12-31
 * 功能: CPU 顺序归约算法
 *
 * 本文件提供 CPU 版本的归约算法：
 * - 作为性能对比的基准
 * - 作为结果验证的参考
 * - 演示最简单的归约实现
 */

#include "reduce.hpp"

/**
 * CPU 归约（求和）算法
 *
 * @param data: 输入数组
 * @param size: 数组元素个数
 * @return 所有元素之和
 *
 * 算法特点：
 * - 单线程顺序执行
 * - 时间复杂度 O(N)
 * - 空间复杂度 O(1)
 * - 实现简单直观
 *
 * 实现说明：
 * - 使用简单的循环累加
 * - 没有并行化
 * - 没有优化技巧
 * - 作为正确性的参考标准
 *
 * 性能分析：
 * - 内存访问：顺序访问，缓存友好
 * - 计算密度：低，受内存带宽限制
 * - 可扩展性：差，无法利用多核
 *
 * 使用场景：
 * - 小数据集处理
 * - 结果验证
 * - 性能基准测试
 */
float ReduceOnCPU(float *data, int const size)
{
    float sum = 0;  // 累加器初始化

    // 顺序遍历所有元素
    for (int i = 0; i < size; ++i){
        sum += data[i];  // 累加操作
    }

    return sum;  // 返回最终结果
}

/**
 * 学习要点总结：
 *
 * 1. CPU vs GPU 归约对比：
 *    CPU 归约：
 *    - 优点：实现简单，易于理解，适合小数据
 *    - 缺点：无法并行，性能受限，大数据慢
 *
 *    GPU 归约：
 *    - 优点：大规模并行，适合大数据，高吞吐量
 *    - 缺点：实现复杂，需要同步，有传输开销
 *
 * 2. 归约算法的重要性：
 *    - 基础算法：许多复杂算法的基础
 *    - 广泛应用：统计、科学计算、机器学习
 *    - 性能关键：常成为性能瓶颈
 *    - 并行典范：展示并行化的核心技术
 *
 * 3. 优化思路：
 *    - CPU 端：向量化、多线程、缓存优化
 *    - GPU 端：避免分支、共享内存、寄存器优化
 *    - 混合：CPU-GPU 协作、流水线处理
 *
 * 4. 验证的重要性：
 *    - 保留简单正确的实现作为参考
 *    - 优化不应改变算法的正确性
 *    - 定期验证优化版本的结果
 *    - 考虑浮点数精度误差
 */